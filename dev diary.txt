afternoonwideboys.com project plan


1. adapt the twine back-end for accounts system -> look into heroku and what is needed there -> design database -> done, and I think I'll probably adapt the restaurant back-end more likely.

2. create react app for the front-end -> think about rest of design
3. design user interface
4. add users, got 2 invite tokens to create already
5. possibly create discord server


=========

If we say the MVP is people creating accounts and earning points as they create, then relationships can be ignored for now.

So we can do a login token perhaps.

ok, first step creating the database

done.

next, initialise back-end. I think do it with npm?

done.

look up how to create a route and export it to another file, then add it to the thing.

then do that for the registration route.


built the reg and login routes.

text? 

GET all texts
POST a new text -> broken this because of the timestamp thing, no it was my SQL injection vulnerable code

Bug: can't use quotes or single quotes in text posts
Fix: use something else for the query interactions so that we can use quotes and not worry about sql injection

items?

GET all items for my user account: select
POST a new item: insert
PUT update the quantity on one of my items: update

the get should be a view on items with descriptions

fuck it, other people's items can be public, not going to check for tokens on that one.


got all those in.


So, after one day, there's a pretty robust set of routes. Can copy the one for texts for videos and audios.

Would be good to get texts for a specific user.

GET texts/{userId}

and we can add profiles and stuff maybe.

The hardest part is going to be deploying to heroku I think. I don't really have an apetite for it as a fun thing to do.

So, having installed massive.js and seen that it's how I want to do the database interactions, the question is, what to do next.

I could go through and switch everything over to that (nope, not right now)

Make the front end.

Closer to what I do for work normally, so less exciting I think.

But let's have a look see.


If this existed, I think I would post stuff on it first.


======

1. index page

2. login has link to signup page, successful login go to index page

3. on signup, if the invite token is valid, go to index page

4. index page has just all the texts and a way to add new ones (if logged in)


I need a context for if they're logged in, and have a token.

created the sign up screen basically. 

1. need the fetch to be right.
2. need to look at what the api is returning so it's matched up to what the front-end expects

login is easier to test. so i'm going to do a login page

login worked nicely

could make a cookie to stay logged in. leave that.


check sign up works. it does.

at this point, it seems to be going so smoothly, that if I'm able to deploy the api to heroku, then I can link it to netlify and have a whale of a time. challenge -> config files, heroku deploy and pg provision is all new.


get create text working, and the currency display I think. get everything on the index card done, then /attempt/ to deploy


user pages -> done
items -> need to get some items man. -> done
styling -> i think it would more fun to deploy, then I can do styles later

api: fix the text string thing 

is all that's left on the card.

then if I feel like it, try to deploy.

----

for heroku, need to make an env file, then have config reference that file.

then provision db, and migrate to it.

postgres://user:password@host:post/database

restarting computer to reset pg cache

so, this terrible hack requires that I have the package.json for the api eternally in the monorepo folder

remember to look at 

migrate database -> 
create pg dump file. 
host it on the webapp as a public file

https://inspiring-cori-74a3c0.netlify.app/migration.sql

reference using heroku

heroku pg:backups:restore "https://inspiring-cori-74a3c0.netlify.app/migration.sql" -a afternoonwideboys-api

migration successful

change 

ok, so, something is up with the server.

the requests work with the massive thing.

so let's switch them all to that now then.

then connect over the site.

done



Minor changes: 

- load all texts with newest at the top -> done
- add the password type input on passwords -> done
- put send next to box, and add inactive style -> done


then I could add the invite codes by psql and the site would exist



actually just going to create a route called invite.




setCookie on successful login. on load home, try to getCookie and set user to that if there is one.


The characters.


awardItem, id 3, Rodney's...stained belt? it's a night time belt. for when you're alone.


need to see if postgres can connect remotely and do an add to the itemtypes table.



I can't afford -> typing in the pleading words (setCookie for that, really this should be events in the db, right?)


Buying the toilet -> pleasure doing business with you
award negative afternoonwidebucks
tryCreateItem


style the pleading, and possibly move itemState up a layer


signup

sha256(password);


login

sha256(password);


go through the passwords, and manually hash them: done.


/////



videos

replies? comments?

use items e.g. toilet or belt can be instead of the clown. video camera allows uploading videos...




POST on videos, checks if the video is a youtube url, if it is, enter it into the database.

can do more validation later, but for now, do a simple one



swap getTexts for getContent later on when we have a mixed timeline.

View rule for videos with creators

 SELECT "Users"."Id",
    "Users"."Name",
    "Videos"."Title",
    "Videos"."Url",
    "Videos"."Created",
    "Videos"."UserCreator",
	"Videos"."Id" AS "VideoId"
   FROM "Users",
    "Videos"
  WHERE "Users"."Id" = "Videos"."UserCreator";

VideosWithCreators needs to be added, and created changed to timestamp without timezone

////


if there are both texts and videos

and the last text is later than the last video


merged contents



video page

need a getVideo by Id 

///


to get the player state is going to require some messing with the player api code.


the hard part might be applying my style, or that might be fine.


I think it's the DOM manipulation inside a react function that is going to be uncomfortable.



onYouTubeIframeAPIReady probably needs to be globally accessible, because the youtubeIframe script tag needs to be able to call it.


style comments

create new comments -> 


sometimes the player never sends "onplayerready". 

1) either that should never happen or
2) when that happens, refresh the page.

hmm. this might be the halting problem. oh well.


////


Replies.

Easiest to represent as a new type of content, related to texts.

Choice between single replies, or long threads.

long threads are more fun, just makes retrieval and compilation more difficult.

had an idea that texts can appear multiple times, but they can only link to an earlier text once.

could also do pagination, or only retrieve 1000 contents in one go, that would limit the computational complexity of the api call.


if replies are just links between contents, is that cleaner than replies actually containing content?

so replies do have to keep track of the types they link between, because the IDs aren't unique across different content type tables.


I'm just thinking about how I'd like to receive replies in the front-end. 

Given that all the front-end needs is to render a list, and some of them need lines between them, probably the logic around merging and ordering the streams should be done in the back-end before the stuff is actually returned.


just add "hasReply: true" to the content and then it'll render a little linky thing.

Replies

Id
ToType
ToId
FromType
FromId

ContentTypes

Id
Name
Description



Step 1: move the mergeContent to the back-end. done.

Step 2: make db changes. done.

Step 3: adapt merging algorithm to incorporate easy version of replies



Step 4: need to do create reply with whatever the textId that's been created is. or could just pass along isReply, with replyId and type. yeah going to do that.


could possibly simplify the text and video component with the reply button, and such.


replyToItem might be easier than replyToId...

refactor to make simpler tomorrow, if I want. for now, let's get it to work.


display item being replied to
add api calls

/////

add invitecode screen so i'm not using postman



////



Wall


position (as percentage of screen)
rotation
size
colour
text
age (for opacity)

add colours and sizes



look at multi-touch



convert to vw vh, for everyone nerves


there's something about not letting it off the edge of the screen. something that i'm not getting


also, need to set the size on mobile



multi-touch, rotation and vertical pinch/stretch, and just general being better




have rotation on the detect when sending, just don't have a way to edit it yet. so it goes in the database



mystery of the layout of the previous stickers...


if we have padding on the draggable, need padding on the stickers



make text-input invisible, add a p on top that matches it



if stickers and newSticker are position: absolute, then newSticker can be clicked on, but page expands

if newSticker doesn't have position:absolute, then it can get stuck under one of the elements that's above it in the list. annoyingly z-index isn't working.





send all email notifications

-> for all users, check if they have notifications turned on,
check if there are stickers older than 24 hours that were posted after their last login -> send email about the stickers

do this check once per day.


turn off email notifications





put lots of images of banks there, and then when a picture is uploaded, replace them all with that picture




on the send and give and share buttons, don't refresh, flash THANKS in big letters

//////


awb email system


1. privileged users send emails to all users

	- need email privilege, don't think database has that at present, already have role types and roles, so just add a new type and then get that going.
		added a new type on the local db
		new role type of email sender
		new role for my user
	
	- screen for email, check if privilege exists, then give text box for email
	- api call to send email
	
	email subject could be radio buttons and then perhaps an "other"
	
	need to validate the token in send emails



2. collect points using links in emails?

3. different types of emails from templates?

4. sign up to the email experience

5. deliberately annoying unsubscribe process
	We're so sorry that you feel the need to make this a problem.
	
	Please enter the email address you wish to unsubscribe with.

	please give the reason for ubsubscribing "there is no joy in my heart" "Tidying up loose ends before suicide" "Want to hurt John and Tom only way I know how" 
	
	Other:[] 
	
	*reason invalid
	
	slide this slider to the left if you don't want to subscribe
	
	check every 3rd box
	
	slide this slider to the right
	
	enter the following text "I solemnly insist that I no longer want to receive emails from the afternoonwideboys"
	
	tick the box, I have read and agreed to the unsubscription policy.
		liar, we can tell you haven't opened it
		
	please don't untoggle this box if you don't want to not unsubscribe
	
	"thank you for choosing to stay with us"
	
	error: unsubscription unsuccessful for unknown reason, please contact newsletter.management@afternoonwideboys.com to contnue unsubscription process, quoting unsubscription attempt 59345-1297
	
	We're sorry for any inconvenience caused by your harmful choices and hope you have a pleasant day.	
	
	sounds playing throughout? " *moans* *wails* why are you doing this? I don't understand why this is happening *sobs* "


















