afternoonwideboys.com project plan


1. adapt the twine back-end for accounts system -> look into heroku and what is needed there -> design database -> done, and I think I'll probably adapt the restaurant back-end more likely.

2. create react app for the front-end -> think about rest of design
3. design user interface
4. add users, got 2 invite tokens to create already
5. possibly create discord server


=========

If we say the MVP is people creating accounts and earning points as they create, then relationships can be ignored for now.

So we can do a login token perhaps.

ok, first step creating the database

done.

next, initialise back-end. I think do it with npm?

done.

look up how to create a route and export it to another file, then add it to the thing.

then do that for the registration route.


built the reg and login routes.

text? 

GET all texts
POST a new text -> broken this because of the timestamp thing, no it was my SQL injection vulnerable code

Bug: can't use quotes or single quotes in text posts
Fix: use something else for the query interactions so that we can use quotes and not worry about sql injection

items?

GET all items for my user account: select
POST a new item: insert
PUT update the quantity on one of my items: update

the get should be a view on items with descriptions

fuck it, other people's items can be public, not going to check for tokens on that one.


got all those in.


So, after one day, there's a pretty robust set of routes. Can copy the one for texts for videos and audios.

Would be good to get texts for a specific user.

GET texts/{userId}

and we can add profiles and stuff maybe.

The hardest part is going to be deploying to heroku I think. I don't really have an apetite for it as a fun thing to do.

So, having installed massive.js and seen that it's how I want to do the database interactions, the question is, what to do next.

I could go through and switch everything over to that (nope, not right now)

Make the front end.

Closer to what I do for work normally, so less exciting I think.

But let's have a look see.


If this existed, I think I would post stuff on it first.


======

1. index page

2. login has link to signup page, successful login go to index page

3. on signup, if the invite token is valid, go to index page

4. index page has just all the texts and a way to add new ones (if logged in)


I need a context for if they're logged in, and have a token.

created the sign up screen basically. 

1. need the fetch to be right.
2. need to look at what the api is returning so it's matched up to what the front-end expects

login is easier to test. so i'm going to do a login page

login worked nicely

could make a cookie to stay logged in. leave that.


check sign up works. it does.

at this point, it seems to be going so smoothly, that if I'm able to deploy the api to heroku, then I can link it to netlify and have a whale of a time. challenge -> config files, heroku deploy and pg provision is all new.


get create text working, and the currency display I think. get everything on the index card done, then /attempt/ to deploy


user pages -> done
items -> need to get some items man. -> done
styling -> i think it would more fun to deploy, then I can do styles later

api: fix the text string thing 

is all that's left on the card.

then if I feel like it, try to deploy.

----

for heroku, need to make an env file, then have config reference that file.

then provision db, and migrate to it.













